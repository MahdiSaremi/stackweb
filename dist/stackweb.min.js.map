{
  "version": 3,
  "sources": ["../js/php-functions.ts", "../js/php-types.ts", "../js/php.ts", "../js/index.ts"],
  "sourcesContent": ["/**\n * README\n *\n * This file exports php functions and do the same logic with php.\n * All the functions should be lowercase (cause of php function resolver logic).\n * Function arguments should contain `$params: Params` parameters.\n */\nimport {Params, PHPUtils} from \"./php\";\n\nexport function gettype($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value)\n}\n\n// export function is_int($params: Params) {\n//     let value = $params.next('value')\n//     $params.end()\n//\n//     return typeof value === \"bigint\"\n// }\n\n// export const is_integer = is_int\n\nexport function is_float($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value) === \"double\"\n}\n\nexport const is_double = is_float\n\nexport function is_bool($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value) === \"boolean\"\n}\n\nexport function is_null($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value) === \"null\"\n}\n\nexport function is_object($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value) === \"object\"\n}\n\nexport function is_string($params: Params) {\n    let value = $params.next('value')\n    $params.end()\n\n    return PHPUtils.getType(value) === \"string\"\n}\n", "import {PHPUtils} from \"./php\";\n\nexport class PHPRef {\n    private value: any\n\n    constructor(value: any = undefined) {\n        this.value = value\n    }\n\n    set(value: any) {\n        if (this.value instanceof PHPRef) {\n            return this.value.set(value)\n        }\n\n        this.value = value\n    }\n\n    get() {\n        if (this.value instanceof PHPRef) {\n            return this.value.get()\n        }\n\n        return this.value\n    }\n}\n\nexport class PHPArray {\n\n    // @ts-ignore\n    public map: Map\n\n    public keys: Array<number|string>\n\n    public high: number\n\n    // @ts-ignore\n    constructor(map: Map, keys: Array<number|string>, high: number) {\n        this.map = map\n        this.keys = keys\n        this.high = high\n    }\n\n    static fromEmpty(): PHPArray {\n        // @ts-ignore\n        return new PHPArray(new Map(), [], -1)\n    }\n\n    static fromArray(array: Array<any>): PHPArray {\n        // @ts-ignore\n        let map = new Map()\n        let keys = []\n        array.forEach((value, index) => {\n            map.set(index, value)\n            keys.push(index)\n        })\n\n        return new PHPArray(map, keys, array.length - 1)\n    }\n\n    // @ts-ignore\n    static fromMap(map: Map<string|number, any>): PHPArray {\n        let keys = []\n        let high = -1\n        for (const key in map.keys()) {\n            keys.push(key)\n            if (typeof key == \"number\" && key > high) {\n                high = key\n            }\n        }\n\n        return new PHPArray(map, keys, high)\n    }\n\n    static fromObject(object: Object): PHPArray {\n        // @ts-ignore\n        let map = new Map()\n        let keys = []\n        let high = -1\n        for (let key in object) {\n            let num = +key\n            if (!isNaN(num)) {\n                // @ts-ignore\n                key = num\n            }\n\n            map.set(key, object[key])\n            keys.push(key)\n\n            if (typeof key == \"number\" && key > high) {\n                high = key\n            }\n        }\n\n        return new PHPArray(map, keys, high)\n    }\n\n    push(value: any) {\n        this.high++\n\n        if (this.map.has(this.high)) {\n            this.map.set(this.high, value)\n            return\n        }\n\n        this.map.set(this.high, value)\n        this.keys.push(this.high)\n    }\n\n    pop() {\n        if (this.keys.length == 0) {\n            return null\n        }\n\n        let last = this.keys.pop()\n        let pop = this.map.get(last)\n        this.map.delete(last)\n\n        if (last === this.high) {\n            this.high--\n        }\n\n        return pop\n    }\n\n    set(key: string|number, value: any) {\n        if (typeof key == \"string\") {\n            let num = +key\n            if (!isNaN(num)) {\n                key = num\n            }\n        }\n\n        if (typeof key == \"number\") {\n            if (key == this.high + 1) {\n                this.push(value)\n                return\n            }\n            else if (key > this.high) {\n                this.high = key\n            }\n        }\n\n        if (this.map.has(key)) {\n            this.map.set(key, value)\n            return\n        }\n\n        this.map.set(key, value)\n        this.keys.push(key)\n    }\n\n    get(key: string|number) {\n        if (typeof key == \"string\") {\n            let num = +key\n            if (!isNaN(num)) {\n                key = num\n            }\n        }\n\n        return this.map.get(key)\n    }\n\n    plus(array: PHPArray) {\n        this.high = this.high > array.high ? this.high : array.high\n        array.map.forEach((value, key) => {\n            if (!this.map.has(key)) {\n                this.map.set(key, value)\n                this.keys.push(key)\n            }\n        })\n    }\n\n    replace(array: PHPArray) {\n        this.high = this.high > array.high ? this.high : array.high\n        array.map.forEach((value, key) => {\n            this.set(key, value)\n        })\n    }\n\n    merge(array: PHPArray) { // todo\n        this.high = this.high > array.high ? this.high : array.high\n        array.map.forEach((value, key) => {\n            this.set(key, value)\n        })\n    }\n\n}\n", "import * as PhpFunctions from './php-functions'\nimport {PHPArray, PHPRef} from \"./php-types\";\n\nexport class Scope {\n\n    $static: string\n    $this: Object\n    vars: Object\n\n    // @ts-ignore\n    v: Proxy\n\n    constructor($static: string = undefined, $this: Object = undefined, vars: Object = {}) {\n        this.$static = $static\n        this.$this = $this\n        this.vars = vars\n\n        // @ts-ignore\n        this.v = new Proxy<Scope>(this, {\n            get(target: Scope, p: string | symbol, receiver: any): any {\n                if (p == 'this') {\n                    return target.$this\n                }\n\n                let value = target.vars[p]\n\n                if (value instanceof PHPRef) {\n                    return value.get()\n                }\n\n                return value\n            },\n\n            set(target: Scope, p: string | symbol, newValue: any, receiver: any): boolean {\n                if (target.vars[p] instanceof PHPRef) {\n                    target.vars[p].set(newValue)\n                    return true\n                }\n\n                target.vars[p] = newValue\n                return true\n            },\n\n            has(target: Scope, p: string | symbol): boolean {\n                return target.vars[p] !== undefined\n            },\n        })\n    }\n\n    ref(name: string) {\n        let value = this.vars[name]\n\n        if (value instanceof PHPRef) {\n            return value\n        }\n\n        return this.vars[name] = new PHPRef(value)\n    }\n\n}\n\nexport class Params {\n\n    $this: Object\n    $static: string\n\n    values: Object\n    i: number\n\n    constructor(values: Object, $this: Object, $static: string) {\n        this.$this = $this\n        this.$static = $static\n        this.values = values\n        this.i = 0\n    }\n\n    next(name: string, defaults : () => any = undefined): any {\n        if (this.values[name] !== undefined) {\n            let value = this.values[name]\n            delete this.values[name]\n\n            return value\n        }\n\n        if (this.values[this.i] !== undefined) {\n            let value = this.values[this.i++]\n            delete this.values[name]\n\n            return value\n        }\n\n        if (defaults) {\n            return defaults()\n        }\n\n        throw new Error(`Parameter ${name} not passed`)\n    }\n\n    end() {\n    }\n\n}\n\nexport class PHPUtils {\n\n    /**\n     * Operator for +\n     *\n     * @param left\n     * @param right\n     */\n    static opAdd(left: any, right: any) {\n        return this.toNumber(left) + this.toNumber(right)\n    }\n\n    /**\n     * Operator for -\n     *\n     * @param left\n     * @param right\n     */\n    static opSub(left: any, right: any) {\n        return this.toNumber(left) - this.toNumber(right)\n    }\n\n    /**\n     * Operator for *\n     *\n     * @param left\n     * @param right\n     */\n    static opMul(left: any, right: any) {\n        return this.toNumber(left) * this.toNumber(right)\n    }\n\n    /**\n     * Operator for /\n     *\n     * @param left\n     * @param right\n     */\n    static opDiv(left: any, right: any) {\n        return this.toNumber(left) / this.toNumber(right)\n    }\n\n    /**\n     * Operator for .\n     *\n     * @param left\n     * @param right\n     */\n    static opDot(left: any, right: any) {\n        return this.toString(left) + this.toString(right)\n    }\n\n    static getType(value: any): string {\n        switch (typeof value) {\n            case \"undefined\":\n                return \"null\"\n\n            case \"number\":\n                return \"double\"\n\n            case \"bigint\":\n                return \"integer\"\n\n            case \"boolean\":\n                return \"boolean\"\n\n            case \"string\":\n                return \"string\"\n\n            case \"object\":\n                if (value === null) {\n                    return \"null\"\n                }\n\n                if (value instanceof Array) {\n                    return \"array\"\n                }\n\n                return \"object\"\n\n            case \"function\":\n            case \"symbol\":\n            default:\n                return \"object\"\n        }\n    }\n\n    static toNumber(value: any): number {\n        let type = typeof value\n\n        switch (type)\n        {\n            case \"bigint\":\n            case \"number\":\n                return value\n\n            case \"boolean\":\n                return value ? 1 : 0\n\n            case \"undefined\":\n                return 0\n\n            case \"object\":\n                return value === null ? 1 : 0\n\n            case \"string\":\n                let num = +value\n                return isNaN(num) ? 0 : num\n\n            default:\n                return 1\n        }\n    }\n\n    static toString(value: any): string {\n        let type = typeof value\n\n        switch (type)\n        {\n            case \"bigint\":\n            case \"number\":\n                return '' + value\n\n            case \"string\":\n                return value\n\n            case \"boolean\":\n                return value ? '1' : ''\n\n            case \"undefined\":\n                return ''\n\n            case \"object\":\n                return value === null ? '' : 'object'\n\n            default:\n                return 'object'\n        }\n    }\n\n    static toBool(value: any): boolean {\n        let type = typeof value\n\n        switch (type)\n        {\n            case \"bigint\":\n            case \"number\":\n                return value != 0;\n\n            case \"string\":\n                return value != \"\" && value != \"0\"\n\n            case \"boolean\":\n                return value\n\n            case \"undefined\":\n                return false\n\n            case \"object\":\n                return value !== null\n\n            default:\n                return true\n        }\n    }\n\n    static isNumeric(value: any): boolean {\n        let type = typeof value\n\n        if (type == \"bigint\" || type == \"number\") {\n            return true\n        }\n\n        if (type != \"string\") {\n            return false\n        }\n\n        return !isNaN(value) && !isNaN(+value)\n    }\n\n}\n\nexport let PHP = {\n    functions: PhpFunctions,\n}\n\n// @ts-ignore\nwindow.P = PHP\n\n// @ts-ignore\nwindow.Test = () => {\n    let local: Scope = new Scope(), v = local.v\n    v.a = PHPArray.fromObject({0: 1, 1: 2, 2: 3})\n    v.a.set('4', 5)\n    v.a.push(5)\n\n    console.log(v.a)\n}\n", "import './php'\n\nexport abstract class Entity {\n\n    parent: Entity\n    parentE: Entity\n    el: Element\n    isMounted = false\n\n    protected abstract onMount(): void\n\n    protected abstract onUnmount(): void\n\n    protected abstract onMorph(other: Entity): void\n\n    public mount(parent: Entity, parentE: Entity, el: Element) {\n        this.parent = parent\n        this.parentE = parentE\n        this.el = el\n        this.isMounted = false\n        this.onMount()\n        this.isMounted = true\n    }\n\n    public unmount() {\n        this.onUnmount()\n        this.isMounted = false\n    }\n\n    public morph(other: Entity) {\n        if (this.isStatic) return\n\n        this.onMorph(other)\n    }\n\n\n    isStatic: boolean = false\n    public static() {\n        this.isStatic = true\n        return this\n    }\n\n\n    public abstract resolveRelativeNodes(): [Node, Node]\n\n    public abstract resolveNextNodeOf(child: Entity): Node\n\n\n    protected insertNode(node: Node) {\n        if (this.parentE.isMounted) {\n            let nextOfMe = this.parent.resolveNextNodeOf(this)\n            if (nextOfMe) {\n                this.parent.el.insertBefore(node, nextOfMe)\n            } else {\n                this.parent.el.appendChild(node)\n            }\n        } else {\n            this.parent.el.appendChild(node)\n        }\n    }\n\n}\n\nexport class Root extends Entity {\n    source: Group\n\n    constructor(source: Group) {\n        super();\n        this.source = source\n    }\n\n    protected onMount() {\n        this.source.mount(this, this, this.el)\n    }\n\n    protected onUnmount() {\n        this.source.unmount()\n    }\n\n    onMorph(other: Entity) {\n        this.source.morph((other as Root).source)\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        return this.source.resolveRelativeNodes()\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return undefined\n    }\n}\n\nexport class Group extends Entity {\n    source: Array<Entity>\n\n    constructor(source: Array<Entity>) {\n        super()\n        this.source = source\n    }\n\n    onMount() {\n        for (const i in this.source) {\n            this.source[i].mount(this, this.parentE, this.el)\n        }\n    }\n\n    onUnmount() {\n        for (const i in this.source) {\n            this.source[i].unmount()\n        }\n    }\n\n    onMorph(other: Entity) {\n        for (const i in this.source) {\n            this.source[i].morph((other as Group).source[i])\n        }\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        if (this.source.length == 0) {\n            return [undefined, undefined]\n        } else if (this.source.length == 1) {\n            return this.source[0].resolveRelativeNodes()\n        } else {\n            let a, b, i\n\n            // Todo : Should save in array to better performance\n            for (i = 0; i < this.source.length; i++) {\n                let cur = this.source[i].resolveRelativeNodes()\n                if (cur[0] || cur[1]) {\n                    a = cur[0] ?? cur[1]\n                    break\n                }\n            }\n            for (i = this.source.length - 1; i >= 0; i--) {\n                let cur = this.source[i].resolveRelativeNodes()\n                if (cur[0] || cur[1]) {\n                    b = cur[1] ?? cur[0]\n                    break\n                }\n            }\n\n            return [a, b]\n        }\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        let index = this.source.indexOf(child)\n        for (let i = index + 1; i < this.source.length; i++) {\n            let cur = this.source[i].resolveRelativeNodes()\n            if (cur[0] || cur[1]) {\n                return cur[0] ?? cur[1]\n            }\n        }\n\n        if (this.parent) {\n            return this.parent.resolveNextNodeOf(this)\n        }\n\n        return undefined\n    }\n}\n\nexport interface DomRegister {\n    name: string\n    attrs: Object\n    slot: Group\n}\n\nexport class Dom extends Entity {\n    source: DomRegister\n\n    constructor(source: DomRegister) {\n        super()\n        this.source = source\n    }\n\n    onMount() {\n        this.el = document.createElement(this.source.name)\n\n        this.insertNode(this.el)\n\n        this.source.slot.mount(this, this, this.el)\n    }\n\n    onUnmount() {\n        this.el.remove()\n        this.el = undefined\n    }\n\n    onMorph(other: Entity) {\n        this.source.slot.morph((other as Dom).source.slot)\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        return [this.el, this.el];\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return undefined;\n    }\n}\n\nexport class Text extends Entity {\n    node: Node\n    value: string\n\n    constructor(value: string) {\n        super();\n        this.value = value\n    }\n\n    onMount() {\n        this.node = document.createTextNode(this.value)\n        this.insertNode(this.node)\n    }\n\n    onUnmount() {\n        this.el.removeChild(this.node)\n        this.node = undefined\n    }\n\n    onMorph(other: Entity) {\n        this.value = (other as Text).value\n        this.node.textContent = this.value\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        return [this.node, this.node];\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return undefined;\n    }\n}\n\nexport class HelloWorld extends Entity {\n    node: Node\n\n    onMount() {\n        this.node = document.createTextNode('Hello World (' + Math.floor(Math.random() * 100) + ')')\n        this.insertNode(this.node)\n    }\n\n    onUnmount() {\n        this.el.removeChild(this.node)\n        this.node = undefined\n    }\n\n    onMorph(other: Entity) {\n        this.node.textContent = 'Hello World (' + Math.floor(Math.random() * 100) + ')'\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        return [this.node, this.node];\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return undefined;\n    }\n}\n\nexport interface ComponentRegister {\n    states: ($: Invoke) => Object\n    slots: ComponentRegisterSlots,\n    render: ($: Invoke) => Group,\n}\n\nexport interface ComponentRegisterSlots {\n    [index: string]: ($: Invoke) => Group,\n}\n\nexport class Component {\n    source: ComponentRegister\n\n    constructor(source: ComponentRegister) {\n        this.source = source\n    }\n\n    // Modes: 0 - When Update, 1 - Always Morph, 2 - Never Morph\n    morphMode: number = 0\n\n    morphType(mode: number) {\n        this.morphMode = mode\n        return this\n    }\n}\n\nexport class Invoke extends Entity {\n    component: Component\n    slots: Object\n    props: Object\n    states = {}\n    content: Group\n\n    constructor(component: Component, props: Object, slots: Object) {\n        super()\n        this.component = component\n        this.props = props\n        this.slots = slots\n    }\n\n    onMount() {\n        for (const slotKey in this.component.source.slots) {\n            if (this.slots[slotKey] === undefined) {\n                this.slots[slotKey] = () => this.component.source.slots[slotKey](this)\n            }\n        }\n\n        this.states = this.component.source.states(this)\n        this.content = this.component.source.render(this)\n\n        this.content.mount(this, this.parentE, this.el)\n    }\n\n    onUnmount() {\n        this.content.unmount()\n    }\n\n    reset() {\n        this.states = this.component.source.states(this)\n    }\n\n    changed: boolean = false\n\n    refresh() {\n        const newRender = this.component.source.render(this)\n\n        this.content.morph(newRender)\n\n        this.changed = false\n    }\n\n    onMorph(other: Entity) {\n        if (this.component.morphMode == 0) {\n            let changed = false\n            // if (JSON.stringify(this.slots) !== JSON.stringify((other as Invoke).slots)) {\n            //     changed = true\n            //     this.slots = (other as Invoke).slots\n            // }\n            if (JSON.stringify(this.props) !== JSON.stringify((other as Invoke).props)) {\n                changed = true\n                this.props = (other as Invoke).props\n            }\n\n            if (changed) {\n                this.content.morph((other as Invoke).component.source.render(this))\n            }\n        }\n        if (this.component.morphMode == 1) {\n            this.content.morph((other as Invoke).component.source.render(this))\n        }\n    }\n\n    getState(name: string) {\n        return this.states[name]\n    }\n\n    setState(name: string, value: any) {\n        this.states[name] = value\n        this.changed = true\n    }\n\n    track(callback: () => any) {\n        callback()\n        if (this.changed) {\n            this.refresh()\n        }\n    }\n\n    getSlot(name: string = '') {\n        return this.slots[name]\n    }\n\n    getProp(name: string) {\n        return this.props[name]\n    }\n\n    getApiResult(name: string) {\n        return null // TODO\n    }\n\n    get(name: string) {\n        if (this.states[name] !== undefined) {\n            return this.states[name]\n        }\n        if (this.props[name] !== undefined) {\n            return this.props[name]\n        }\n        if (this.slots[name] !== undefined) {\n            return this.slots[name]\n        }\n\n        return undefined\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        return this.content.resolveRelativeNodes()\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return this.parent.resolveNextNodeOf(this)\n    }\n}\n\nexport class If extends Entity {\n    source: Group\n    condition: boolean\n\n    constructor(condition: boolean, source: Group) {\n        super()\n        this.source = source\n        this.condition = condition\n    }\n\n    onMount() {\n        if (this.condition) {\n            this.source.mount(this, this.parentE, this.el)\n        }\n    }\n\n    onUnmount() {\n        if (this.condition) {\n            this.source.unmount()\n        }\n    }\n\n    onMorph(other: Entity) {\n        let newCond = (other as If).condition\n\n        if (newCond != this.condition) {\n            if (newCond) {\n                this.source.mount(this, this.parentE, this.el)\n            } else {\n                this.source.onUnmount()\n            }\n\n            this.condition = newCond\n        }\n    }\n\n    resolveRelativeNodes(): [Node, Node] {\n        if (this.condition) {\n            return this.source.resolveRelativeNodes()\n        } else {\n            return [undefined, undefined];\n        }\n    }\n\n    resolveNextNodeOf(child: Entity): Node {\n        return this.parent.resolveNextNodeOf(this)\n    }\n}\n\nwindow['StackWeb'] = {\n    Entity,\n    Root,\n    Group,\n    Dom,\n    Text,\n    HelloWorld,\n    Component,\n    Invoke,\n    If,\n}\n"],
  "mappings": "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",
  "names": ["php_functions_exports", "__export", "gettype", "is_bool", "is_double", "is_float", "is_null", "is_object", "is_string", "gettype", "$params", "value", "PHPUtils", "is_float", "is_double", "is_bool", "is_null", "is_object", "is_string", "PHPRef", "value", "PHPArray", "map", "keys", "high", "array", "index", "key", "object", "num", "last", "pop", "Scope", "$static", "$this", "vars", "target", "p", "receiver", "value", "PHPRef", "newValue", "name", "PHPUtils", "left", "right", "value", "num", "type", "PHP", "php_functions_exports", "local", "Scope", "v", "PHPArray", "Entity", "parent", "parentE", "el", "other", "node", "nextOfMe", "Root", "source", "child", "Group", "i", "a", "b", "cur", "index", "Dom", "Text", "value", "HelloWorld", "Component", "mode", "Invoke", "component", "props", "slots", "slotKey", "newRender", "changed", "name", "callback", "If", "condition", "newCond"]
}
